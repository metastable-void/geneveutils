#!/bin/sh
# vim: ts=4 sw=4 et ai

cmdname=$0
PATH=/sbin:/bin:/usr/bin:$PATH
export PATH

PKGNAME=geneveutils
VERSION=1.0.0

STATE_PATH=/tmp/.geneveutils.

console_log () {
    [ "$DEBUG" ] && echo "$cmdname: [DEBUG] $@" >&2
}

console_error () {
    echo "$cmdname: [ERROR] $@" >&2
}

print_first_arg () {
    echo "$1"
}

check_for_required_commands () {
    for name in "$@" ; do
        which "$name" >/dev/null 2>&1 || {
            console_error "Required '$name' command not found"
            exit 1
        }
        console_log "Dependency found: `which $name`"
    done
}

check_for_root () {
    [ 0 -eq `id -u` ] || {
        console_error "This requires root privileges."
        return 1
    }
}

link_exists () {
    ifname=$1
    [ "$1" ] || {
        console_error "Interface name cannot be empty"
        return 1
    }
    ip link show "$ifname" >/dev/null 2>&1
}

link_exists_and_up () {
    ifname=$1
    link_exists "$ifname" || return 1
    [ `ip link show "$ifname" up 2>/dev/null | wc -l` -gt 0 ]
}

ipv4_is_reachable () {
    target=$1
    [ "$target" ] || target=default
    ip -4 route get "$target" >/dev/null 2>&1
}

ipv4_is_valid () {
    target=$1
    [ "$target" = default ] && return 1
    echo "$target" | grep '/' >/dev/null && return 1
    ip -4 route get "$target" >/dev/null 2>&1
    if [ $? -ne 1 ] ; then
        return 0
    else
        return 1
    fi
}

ipv6_is_reachable () {
    target=$1
    [ "$target" ] || target=default
    ip -6 route get "$target" >/dev/null 2>&1
}

ipv6_is_valid () {
    target=$1
    [ "$target" = default ] && return 1
    echo "$target" | grep '/' >/dev/null && return 1
    ip -6 route get "$target" >/dev/null 2>&1
    if [ $? -ne 1 ] ; then
        return 0
    else
        return 1
    fi
}

ip_is_reachable () {
    target=$1
    [ "$target" ] || target=default
    ip route get "$target" >/dev/null 2>&1
}

get_ipv4_address () {
    target=$1
    getent ahosts "$target" | grep RAW | while read address ; do
        address=` print_first_arg $address `
        ipv4_is_valid "$address" >/dev/null 2>&1 && {
            echo "$address"
            break
        } || console_log "Invalid IPv4 address: $address"
    done | grep .
}

get_ipv6_address () {
    target=$1
    getent ahosts "$target" | grep RAW | while read address ; do
        address=` print_first_arg $address `
        ipv6_is_valid "$address" >/dev/null 2>&1 && {
            echo "$address"
            break
        } || console_log "Invalid IPv6 address: $address"
    done | grep .
}

check_for_configuration () {
    [ "$GENEVE_IFNAME" ] || {
        console_error "GENEVE_IFNAME must be specified."
        return 1
    }

    [ "$GENEVE_ID" -ge 0 ] >/dev/null 2>&1 && [ "$GENEVE_ID" -le 65535 ] >/dev/null 2>&1 || {
        console_error "Invalid ID: $GENEVE_ID"
        return 1
    }

    [ "$GENEVE_IP_VERSION" -eq 4 ] || [ "$GENEVE_IP_VERSION" -eq 6 ] || {
        console_error "Invalid IP version"
        return 1
    }

    [ "$GENEVE_LINKDEV" ] || {
        console_error "Link device must be specified."
        return 1
    }

    [ "$GENEVE_REMOTE" ] || {
        console_error "GENEVE_REMOTE must be specified."
        return 1
    }

    return 0
}

get_version_address () {
    ip_version=$1
    hostname=$2
    remote_address=
    max_retries=3
    retry_delay=10
    if [ "$ip_version" -eq 4 ] ; then
        retries=0
        while ! [ "$remote_address" ] ; do
            remote_address=` get_ipv4_address "$hostname" `
            [ "$remote_address" ] || {
                retries=$(( $retries + 1 ))
                [ $retries -ge $max_retries ] && {
                    return 1
                }
                sleep $retry_delay
            }
        done
    else
        retries=0
        while ! [ "$remote_address" ] ; do
            remote_address=` get_ipv6_address "$hostname" `
            [ "$remote_address" ] || {
                retries=$(( $retries + 1 ))
                [ $retries -ge $max_retries ] && {
                    return 1
                }
                sleep $retry_delay
            }
        done
    fi
    echo "$remote_address"
}

pre_up () {
    required_commands="getent ip wc grep"
    check_for_required_commands $required_commands

    . "$1" || {
        console_error "Failed to load the configuration file."
        return 1
    }

    check_for_configuration || {
        console_error "Invalid configuration. Aborting."
        return 1
    }

    check_for_root || {
        return 1
    }

    link_exists_and_up "$GENEVE_LINKDEV" || {
        console_error "Link does not exist: ${GENEVE_LINKDEV}; sleeping for 10 seconds..."
        sleep 10
    }
    link_exists_and_up "$GENEVE_LINKDEV" || {
        console_error "Link does not exist: ${GENEVE_LINKDEV}; sleeping for 30 seconds..."
        sleep 30
    }
    link_exists_and_up "$GENEVE_LINKDEV" || {
        console_error "Link does not exist: ${GENEVE_LINKDEV}; sleeping for 60 seconds..."
        sleep 60
    }
    link_exists_and_up "$GENEVE_LINKDEV" || {
        console_error "Link does not exist: ${GENEVE_LINKDEV}; aborting."
        return 1
    }

    link_exists "$GENEVE_IFNAME" && {
        console_error "Device already exists. Continuing."
        return 0
    }

    remote_address=` get_version_address "$GENEVE_IP_VERSION" "$GENEVE_REMOTE" `
    [ "$remote_address" ] || {
        console_error "Failed to get the remote address."
        return 1
    }

    ip_is_reachable "$remote_address" || {
        console_error "Address not reachable: ${remote_address}, sleeping."
        sleep 10
    }

    ip_is_reachable "$remote_address" || {
        console_error "Address not reachable: ${remote_address}, sleeping."
        sleep 30
    }

    ip_is_reachable "$remote_address" || {
        console_error "Address not reachable: ${remote_address}, sleeping."
        sleep 60
    }

    REMOTE_CACHE_FILE=${STATE_PATH}${GENEVE_IFNAME}.remote.cache
    echo "$remote_address" > "$REMOTE_CACHE_FILE"

    link_exists "$GENEVE_IFNAME" && {
        console_error "Device already exists. Continuing."
        return 0
    }

    ip link add link "$GENEVE_LINKDEV" \
        "$GENEVE_IFNAME" type geneve \
        id "$GENEVE_ID" \
        remote "$remote_address" dstport 6081 \
    && {
        console_log "Added link ${GENEVE_LINKDEV}"
        return 0
    } || {
        console_error "Failed to create link ${GENEVE_LINKDEV}"
        return 1
    }
}

post_down () {
    required_commands="getent ip wc grep"
    check_for_required_commands $required_commands

    . "$1" || {
        console_error "Failed to load the configuration file."
        return 1
    }

    check_for_configuration || {
        console_error "Invalid configuration. Aborting."
        return 1
    }

    check_for_root || {
        return 1
    }

    if link_exists "$GENEVE_IFNAME" ; then
        console_log "Deleting GENEVE link ${GENEVE_IFNAME}..."
        ip link delete "$GENEVE_IFNAME" type geneve
    else
        console_log "No such GENEVE link: ${GENEVE_IFNAME}"
    fi
}

restart () {
    required_commands="getent ip wc grep ifup ifdown"
    check_for_required_commands $required_commands

    . "$1" || {
        console_error "Failed to load the configuration file."
        return 1
    }

    check_for_configuration || {
        console_error "Invalid configuration. Aborting."
        return 1
    }

    check_for_root || {
        return 1
    }

    remote_address=` get_version_address "$GENEVE_IP_VERSION" "$GENEVE_REMOTE" `
    [ "$remote_address" ] || {
        console_error "Failed to get the remote address."
        return 1
    }

    REMOTE_CACHE_FILE=${STATE_PATH}${GENEVE_IFNAME}.remote.cache
    cached_remote_address=` cat "$REMOTE_CACHE_FILE" `
    [ "$remote_address" = "$cached_remote_address" ] && link_exists "$GENEVE_IFNAME" && {
        console_log "Address not changed. Doing nothing."
        return 0
    }

    ifdown "$GENEVE_IFNAME"
    ifup "$GENEVE_IFNAME"
}

usage () {
    echo "Usage:"
    echo " $cmdname pre-up <geneve_interface.conf>"
    echo "  - This is the command to run in pre-up hook of interfaces(5) (ifupdown)."
    echo
    echo " $cmdname post-down <geneve_interface.conf>"
    echo "  - This is the command to run in post-down hook of interfaces(5) (ifupdown)."
    echo
    echo " $cmdname restart <geneve_interface.conf>"
    echo "  - Runs ifdown/ifup if the addresses changed. This is safe to run in crontab."
    echo
    echo " $cmdname get-ipv4-address <hostname (or ipv4 address)>"
    echo " $cmdname get-ipv6-address <hostname (or ipv6 address)>"
    echo " $cmdname validate-ipv4-address <ipv4 address>"
    echo " $cmdname validate-ipv6-address <ipv6 address>"
    echo " $cmdname -V|--version|version"
    echo " $cmdname -h|-?|--help|help"
    echo
    echo "GENEVE interface configuration file options:"
    echo "GENEVE_IFNAME=<interface name>"
    echo "GENEVE_IP_VERSION=<4 or 6>"
    echo "GENEVE_ID=<GENEVE tunnel ID>"
    echo "GENEVE_LINKDEV=<link device name>"
    echo "GENEVE_REMOTE=<remote tunnel endpoint hostname or ip address>"
}

console_log "$PKGNAME version $VERSION"

subcommand=$1
[ -z "$1" ] || shift
case "$subcommand" in
    pre-up)
        if [ -f "$1" ] ; then
            pre_up "$1"
        else
            usage
            exit 1
        fi
        ;;
    
    post-down)
        if [ -f "$1" ] ; then
            post_down "$1"
        else
            usage
            exit 1
        fi
        ;;
    
    restart)
        if [ -f "$1" ] ; then
            restart "$1"
        else
            usage
            exit 1
        fi
        ;;

    validate-ipv4-address)
        if ipv4_is_valid "$1" ; then
            echo "$1 is a valid IPv4 address."
            exit 0
        else
            echo "$1 is an invalid IPv4 address."
            exit 1
        fi
        ;;
    
    validate-ipv6-address)
        if ipv6_is_valid "$1" ; then
            echo "$1 is a valid IPv6 address."
            exit 0
        else
            echo "$1 is an invalid IPv6 address."
            exit 1
        fi
        ;;

    get-ipv4-address)
        get_ipv4_address "$1"
        exit
        ;;
    
    get-ipv6-address)
        get_ipv6_address "$1"
        exit
        ;;
    
    version|-V|--version)
        echo "$PKGNAME version $VERSION"
        exit 0;
        ;;
    
    help|-h|--help|-?)
        usage
        exit 0
        ;;
    
    *)
        usage
        exit 1
        ;;
esac
